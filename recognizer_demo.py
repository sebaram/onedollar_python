#!/usr/bin/env python
#
# Simple demo of the $1 gesture recognizer.
# Requires pygame.
#

from dollar import Recognizer

import pygame
import pickle


LEFT = 1
RIGHT = 3

# Raw points for the three example gestures.
circlePoints = [(269, 84), (263, 86), (257, 92), (253, 98), (249, 104), (245, 114), (243, 122), (239, 132), (237, 142), (235, 152), (235, 162), (235, 172), (235, 180), (239, 190), (245, 198), (251, 206), (259, 212), (267, 216), (275, 218), (281, 222), (287, 224), (295, 224), (301, 226), (311, 226), (319, 226), (329, 226), (339, 226), (349, 226), (352, 226), (360, 226), (362, 225), (366, 219), (367, 217), (367, 209), (367, 206), (367, 198), (367, 190), (367, 182), (367, 174), (365, 166), (363, 158), (359, 152), (355, 146), (353, 138), (349, 134), (345, 130), (341, 124), (340, 122), (338, 121), (337, 119), (336, 117), (334, 116), (332, 115), (331, 114), (327, 110), (325, 109), (323, 109), (321, 108), (320, 108), (318, 107), (316, 107), (315, 107), (314, 107), (313, 107), (312, 107), (311, 107), (310, 107), (309, 106), (308, 106), (307, 105), (306, 105), (305, 105), (304, 105), (303, 104), (302, 104), (301, 104), (300, 104), (299, 103), (298, 103), (296, 102), (295, 101), (293, 101), (292, 100), (291, 100), (290, 100), (289, 100), (288, 100), (288, 99), (287, 99), (287, 99)]
squarePoints = [(193, 123), (193, 131), (193, 139), (195, 151), (197, 161), (199, 175), (201, 187), (205, 201), (207, 213), (209, 225), (213, 235), (213, 243), (215, 251), (215, 254), (217, 262), (217, 264), (217, 266), (217, 267), (218, 267), (219, 267), (221, 267), (224, 267), (227, 267), (237, 267), (247, 265), (259, 263), (273, 261), (287, 261), (303, 259), (317, 257), (331, 255), (347, 255), (361, 253), (375, 253), (385, 253), (395, 251), (403, 249), (406, 249), (408, 249), (408, 248), (409, 248), (409, 246), (409, 245), (409, 242), (409, 234), (409, 226), (409, 216), (407, 204), (407, 194), (405, 182), (403, 172), (403, 160), (401, 150), (399, 140), (399, 130), (397, 122), (397, 119), (397, 116), (396, 114), (396, 112), (396, 111), (396, 110), (396, 109), (396, 108), (396, 107), (396, 106), (396, 105), (394, 105), (392, 105), (384, 105), (376, 105), (364, 105), (350, 107), (334, 109), (318, 111), (306, 113), (294, 115), (286, 117), (278, 117), (272, 119), (269, 119), (263, 121), (260, 121), (254, 123), (251, 123), (245, 125), (243, 125), (242, 125), (241, 126), (240, 126), (238, 127), (236, 127), (232, 128), (231, 128), (231, 129), (230, 129), (228, 129), (227, 129), (226, 129), (225, 129), (224, 129), (223, 129), (222, 129), (221, 130), (221, 130)]
trianglePoints = [(282, 83), (281, 85), (277, 91), (273, 97), (267, 105), (261, 113), (253, 123), (243, 133), (235, 141), (229, 149), (221, 153), (217, 159), (216, 160), (215, 161), (214, 162), (216, 162), (218, 162), (221, 162), (227, 164), (233, 166), (241, 166), (249, 166), (259, 166), (271, 166), (283, 166), (297, 166), (309, 164), (323, 164), (335, 162), (345, 162), (353, 162), (361, 160), (363, 159), (365, 159), (366, 158), (367, 158), (368, 157), (369, 157), (370, 156), (371, 156), (371, 155), (372, 155), (372, 153), (372, 152), (372, 151), (372, 149), (372, 147), (371, 145), (367, 141), (363, 137), (359, 133), (353, 129), (349, 125), (343, 121), (337, 119), (333, 115), (327, 111), (325, 110), (324, 109), (320, 105), (318, 104), (314, 100), (312, 99), (310, 98), (306, 94), (305, 93), (303, 92), (301, 91), (300, 90), (298, 89), (297, 88), (296, 88), (295, 87), (294, 87), (293, 87), (293, 87)]


#%%
# =============================================================================
# Custom training format: save as Dictionary
#
# custom_training = {'clockSquare': [[template1],[template2],...[templateN]],
#                    'ccwSquare': [[template1],[template2],...[templateN]],
#                    
#                    'clockTriangle': [[template1],[template2],...[templateN]],
#                    'ccwTriangle': [[template1],[template2],...[templateN]],
#                    
#                    'clockCircle': [[template1],[template2],...[templateN]],
#                    'ccwCircle': [[template1],[template2],...[templateN]]}
# =============================================================================
    
class RecognizerDemo():
    def __init__(self, screen, use_custom = False, file_name = None):
        self.screen = screen
        self.background = (200,200,200, 255)
        self.font = pygame.font.SysFont('hack', 15)
        self.fontBig = pygame.font.SysFont('hack', 25)
        self.mouseDown = False
        self.mouseButton = False
        self.positions = []
        
        self.all_types_string = None
        self.recognizer = Recognizer()
        
        self.extra_trainingPoints = []
        
        
        if use_custom and file_name != None:
            self.useCustomTemplate(file_name)

        else:
            self.all_types_string = "Gestures: circle, square, triangle"
            self.recognizer.addTemplate('circle', circlePoints)
            self.recognizer.addTemplate('square', squarePoints)
            self.recognizer.addTemplate('triangle', trianglePoints)
        
        self.last_name = None
        self.last_index = -1
        self.last_accuracy = 0.0
    def useCustomTemplate(self, file_name):
        self.recognizer = Recognizer()
        with open(file_name, 'rb') as handle:
            custom_training = pickle.load(handle)
        for one_type in custom_training.keys():
            if type(custom_training[one_type][0]) == list:
                for one_data in custom_training[one_type]:
                    self.recognizer.addTemplate(one_type, one_data)
            else:
                self.recognizer.addTemplate(one_type, custom_training[one_type])
            
            
            if self.all_types_string == None:
                self.all_types_string = "Gestures: "+one_type
            else:
                self.all_types_string += ","+ one_type
        print(self.all_types_string)
        
    def OnPaint(self, event):
#        self.screen.fill(self.background)
        
        if not event == None:
            self.mouseButton = event
        
        if self.positions == []:
            return 
        (x, y, event_type) = self.positions[-1]
        
        if event_type == "stop":           
            points = [(p[0], p[1]) for p in self.positions]
            if len(points) > 10:
               (index, name, score) = self.recognizer.recognize(points)
               self.last_index = index
               self.last_name = name
               self.last_accuracy = score
               if self.mouseButton == RIGHT:
                   self.extra_trainingPoints.append(points)
                   print("training points saved ", len(points))
                   self.mouseButton = None
                       
            else:
               self.last_index = -1
               self.last_name = '(Not enough points - try again!)'
               self.last_accuracy = 0.0

    def draw(self):
        if self.mouseButton == LEFT:
            dot_color = (255,255,255)
        elif self.mouseButton == RIGHT:
            dot_color = (255,100,100)
        else:
            dot_color = (0,0,0)
            
        for position in self.positions:
            (x, y, event_type) = position
            if event_type == "start":
                r = 10
            elif event_type == "stop":
                r = 1
            else:
                r = 3
            pygame.draw.circle(self.screen, dot_color, (x,y), r)
        
        self.screen.blit(self.font.render("$1 gesture recognizer demo", True, (0,0,0)), (10,10))
        self.screen.blit(self.font.render(self.all_types_string, True, (0,0,0)), (20, 30))
          
        self.screen.blit(self.font.render("Last drawn gesture: %s" % self.last_name, True, (0,0,0)), (20,60))
        self.screen.blit(self.font.render("Gesture accuracy: %2.2f%%" % (self.last_accuracy * 100), True, (0,0,0)), (20,80))
#%%
if __name__ == "__main__":
    pygame.init()
    pygame.font.init()
    clock = pygame.time.Clock()
    screen = pygame.display.set_mode((800,800))
    done = False
    
    
#    demo = RecognizerDemo(screen, True, 'custom_trainingPoints.pickle')
    demo = RecognizerDemo(screen, True, 'test_multiple.pickle')
    demo.OnPaint(None)
    
    while not done:
        screen.fill([150, 150, 150])
        
        
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                done = True
            elif event.type == pygame.KEYDOWN:
                if event.key == pygame.K_ESCAPE:
                    done = True
            elif event.type == pygame.MOUSEBUTTONDOWN:
                demo.mouseDown = True
                (x, y) = pygame.mouse.get_pos()
                demo.positions = [(x, y, 'start')]
                demo.OnPaint(event.button)
                pos = pygame.mouse.get_pos()
                
            elif event.type == pygame.MOUSEMOTION:
                if demo.mouseDown:
                    (x, y) = pygame.mouse.get_pos()
                    demo.positions.append((x, y, 'move'))
                    demo.OnPaint(None)
                
            elif event.type == pygame.MOUSEBUTTONUP:
                demo.mouseDown = False
                (x, y) = pygame.mouse.get_pos()
                demo.positions.append((x, y, 'stop'))
                demo.OnPaint(event.button)
                
            
        demo.OnPaint(None)
        demo.draw()
                
        pygame.display.flip()
        dt = clock.tick(100)
        
    pygame.quit()    
    
    if len(demo.extra_trainingPoints)>0:
        print("=======Copy below print to put as input=======",end="\n")
        for i, one_template in enumerate(demo.extra_trainingPoints):
            print("input_{} = ".format(i), end="")
            print(one_template)

"""Example of How to make new template easily"""

# =============================================================================
# """1. Copy all text from command line and copy to script"""
# """2. label input and save as dictionary format pickle"""
# 
# 
# input_0 = [(170, 592), (170, 591), (169, 590), (169, 587), (168, 575), (166, 568), (165, 560), (164, 553), (161, 535), (160, 520), (157, 497), (156, 475), (154, 449), (153, 436), (153, 423), (153, 398), (153, 385), (153, 373), (153, 351), (153, 340), (153, 331), (152, 316), (152, 310), (152, 304), (152, 295), (152, 292), (152, 289), (152, 286), (153, 286), (156, 286), (170, 286), (182, 286), (196, 285), (213, 284), (254, 281), (277, 280), (303, 277), (350, 273), (375, 271), (397, 269), (419, 268), (455, 265), (469, 265), (478, 265), (490, 267), (490, 268), (491, 270), (491, 274), (491, 276), (490, 279), (490, 283), (490, 292), (490, 297), (490, 304), (490, 322), (490, 331), (493, 353), (494, 367), (496, 381), (502, 408), (506, 422), (511, 436), (515, 452), (522, 485), (524, 503), (526, 519), (529, 548), (529, 559), (529, 570), (529, 586), (529, 593), (528, 600), (526, 609), (526, 611), (526, 613), (525, 613), (524, 614), (523, 614), (521, 614), (516, 611), (511, 609), (506, 608), (493, 604), (483, 601), (470, 598), (439, 594), (421, 592), (401, 591), (360, 589), (338, 589), (316, 589), (275, 589), (256, 590), (238, 591), (221, 592), (193, 594), (181, 595), (172, 595), (163, 595), (161, 594), (161, 594)]
# input_1 = [(191, 288), (195, 288), (202, 287), (210, 287), (222, 287), (248, 287), (264, 287), (280, 287), (317, 286), (337, 286), (376, 284), (394, 284), (412, 284), (446, 282), (463, 282), (478, 281), (503, 281), (514, 282), (523, 283), (535, 284), (538, 285), (538, 286), (539, 286), (540, 287), (541, 289), (541, 292), (543, 295), (544, 298), (546, 307), (547, 312), (548, 318), (549, 325), (550, 342), (550, 353), (550, 379), (550, 393), (550, 409), (550, 441), (547, 457), (545, 474), (540, 506), (538, 521), (536, 536), (532, 560), (532, 568), (529, 583), (529, 587), (528, 590), (527, 592), (524, 592), (523, 591), (520, 590), (514, 589), (510, 589), (505, 589), (490, 589), (481, 589), (471, 591), (447, 593), (433, 595), (417, 597), (385, 598), (365, 598), (346, 598), (304, 595), (283, 592), (264, 591), (247, 589), (217, 584), (204, 581), (192, 579), (172, 574), (163, 571), (155, 570), (145, 567), (142, 566), (141, 565), (141, 564), (141, 563), (141, 562), (141, 557), (142, 553), (143, 549), (145, 538), (146, 531), (148, 523), (151, 504), (153, 493), (155, 481), (160, 457), (164, 445), (166, 431), (172, 403), (175, 388), (178, 374), (184, 348), (187, 335), (188, 324), (190, 304), (191, 297), (192, 290), (192, 285), (192, 277), (192, 275), (192, 273), (192, 273)]
# input_2 = [(529, 250), (529, 253), (529, 259), (529, 262), (529, 266), (529, 277), (529, 283), (530, 289), (532, 304), (532, 313), (532, 334), (532, 346), (532, 357), (532, 379), (534, 389), (536, 398), (538, 407), (539, 424), (539, 433), (540, 451), (540, 460), (539, 469), (538, 479), (536, 496), (535, 502), (534, 508), (530, 519), (529, 523), (528, 526), (526, 530), (526, 531), (526, 532), (525, 532), (524, 532), (523, 532), (521, 532), (517, 532), (514, 532), (510, 532), (500, 530), (493, 529), (487, 527), (478, 526), (456, 521), (443, 519), (429, 517), (412, 514), (379, 511), (363, 510), (348, 509), (334, 508), (308, 508), (296, 506), (286, 505), (265, 502), (256, 501), (247, 499), (235, 495), (232, 494), (231, 494), (230, 494), (229, 494), (229, 493), (229, 491), (229, 490), (229, 487), (229, 479), (230, 475), (231, 469), (232, 453), (233, 443), (235, 431), (235, 403), (235, 390), (235, 377), (237, 355), (238, 343), (239, 333), (243, 312), (244, 301), (244, 289), (246, 271), (246, 265), (246, 255), (246, 251), (246, 249), (247, 248), (247, 247), (248, 247), (251, 247), (264, 247), (274, 247), (284, 247), (310, 244), (326, 242), (341, 241), (372, 238), (388, 237), (404, 235), (433, 235), (446, 236), (459, 236), (477, 237), (484, 238), (490, 239), (499, 241), (502, 241), (504, 243), (507, 243), (508, 243), (508, 243)]
# input_3 = [(535, 568), (534, 568), (533, 568), (532, 568), (531, 568), (530, 568), (527, 568), (525, 568), (521, 568), (511, 569), (505, 569), (497, 569), (478, 570), (468, 570), (457, 569), (431, 568), (418, 567), (404, 565), (375, 563), (361, 562), (347, 560), (321, 559), (309, 559), (299, 558), (289, 557), (274, 556), (268, 556), (262, 556), (255, 556), (253, 555), (250, 555), (247, 554), (247, 553), (247, 552), (247, 551), (247, 549), (247, 547), (247, 544), (247, 537), (247, 532), (247, 526), (247, 511), (247, 502), (247, 491), (250, 468), (251, 454), (253, 438), (256, 423), (258, 394), (259, 379), (262, 357), (262, 347), (262, 339), (262, 326), (262, 322), (262, 318), (262, 312), (262, 310), (261, 309), (261, 308), (261, 307), (262, 307), (265, 306), (274, 304), (282, 303), (291, 302), (302, 301), (329, 301), (345, 301), (361, 303), (397, 304), (415, 305), (430, 305), (459, 304), (472, 303), (481, 301), (489, 300), (499, 298), (503, 298), (506, 297), (511, 297), (512, 297), (514, 297), (516, 297), (517, 297), (519, 298), (520, 298), (520, 299), (520, 302), (520, 304), (521, 306), (522, 309), (522, 316), (523, 321), (523, 326), (524, 337), (524, 344), (525, 360), (526, 369), (526, 377), (527, 385), (529, 400), (529, 409), (529, 427), (529, 436), (527, 442), (527, 451), (526, 466), (526, 473), (525, 481), (525, 493), (525, 499), (526, 505), (526, 516), (526, 521), (526, 525), (526, 532), (526, 536), (526, 538), (526, 543), (526, 545), (526, 549), (526, 551), (526, 553), (526, 554), (526, 554)]
# 
# input_4 = [(189, 575), (189, 574), (189, 573), (189, 571), (190, 568), (191, 565), (194, 556), (196, 550), (199, 542), (208, 523), (213, 511), (219, 498), (231, 472), (238, 460), (244, 446), (251, 431), (265, 402), (274, 388), (281, 373), (288, 360), (301, 334), (307, 323), (311, 313), (321, 297), (324, 290), (327, 285), (331, 277), (332, 275), (333, 274), (334, 274), (335, 274), (337, 277), (343, 286), (348, 292), (353, 298), (364, 316), (370, 326), (375, 336), (386, 360), (392, 372), (398, 384), (409, 409), (415, 420), (419, 433), (428, 456), (431, 467), (435, 477), (440, 495), (442, 502), (442, 508), (444, 516), (445, 518), (445, 520), (445, 524), (445, 526), (445, 528), (445, 529), (443, 530), (442, 532), (441, 532), (437, 534), (436, 535), (434, 535), (432, 536), (427, 538), (424, 539), (415, 541), (409, 544), (402, 545), (392, 547), (368, 549), (353, 550), (337, 552), (321, 553), (284, 556), (266, 557), (248, 558), (214, 559), (199, 560), (186, 560), (169, 560), (164, 560), (163, 560), (162, 559), (162, 559)]
# input_5 = [(314, 317), (316, 318), (316, 320), (318, 322), (322, 328), (324, 331), (327, 335), (334, 346), (339, 352), (343, 358), (351, 371), (355, 379), (359, 387), (368, 403), (373, 412), (376, 421), (385, 441), (388, 451), (393, 463), (400, 486), (404, 498), (408, 508), (415, 530), (417, 540), (419, 549), (422, 561), (424, 565), (424, 567), (425, 568), (425, 569), (424, 569), (418, 568), (414, 568), (409, 568), (394, 568), (382, 568), (370, 569), (343, 569), (327, 569), (295, 569), (278, 570), (263, 570), (236, 570), (225, 570), (215, 570), (199, 570), (193, 570), (190, 569), (187, 569), (187, 568), (187, 566), (187, 564), (187, 560), (190, 551), (192, 545), (194, 538), (199, 520), (202, 509), (206, 497), (215, 474), (220, 461), (225, 449), (236, 424), (243, 410), (249, 398), (261, 375), (268, 364), (273, 355), (280, 338), (283, 331), (285, 327), (286, 322), (286, 322)]
# input_6 = [(491, 600), (490, 600), (488, 600), (487, 600), (484, 600), (481, 600), (478, 600), (470, 600), (465, 600), (453, 600), (446, 601), (439, 601), (430, 601), (410, 602), (400, 602), (388, 602), (359, 601), (344, 601), (313, 599), (298, 598), (282, 598), (266, 598), (238, 598), (225, 598), (214, 598), (196, 598), (190, 598), (184, 598), (178, 598), (176, 598), (176, 597), (175, 597), (175, 596), (175, 595), (175, 594), (175, 592), (176, 589), (177, 587), (181, 580), (184, 575), (187, 569), (191, 562), (201, 545), (206, 535), (212, 524), (223, 500), (229, 489), (233, 476), (243, 453), (247, 442), (252, 433), (260, 412), (263, 403), (266, 395), (271, 382), (274, 377), (276, 373), (277, 370), (278, 369), (279, 369), (280, 369), (283, 371), (287, 375), (301, 386), (310, 392), (319, 398), (342, 412), (352, 418), (361, 426), (373, 435), (389, 452), (397, 461), (404, 472), (418, 491), (424, 501), (430, 511), (441, 529), (445, 538), (449, 546), (455, 562), (457, 568), (461, 578), (462, 582), (463, 586), (466, 591), (466, 593), (467, 595), (467, 598), (467, 598)]
# input_7 = [(406, 555), (406, 556), (404, 556), (402, 556), (400, 557), (391, 558), (385, 559), (377, 559), (361, 561), (353, 561), (345, 561), (328, 559), (321, 559), (313, 557), (298, 554), (292, 552), (280, 545), (273, 541), (268, 537), (262, 532), (253, 522), (250, 516), (247, 509), (241, 496), (239, 490), (237, 481), (234, 465), (232, 458), (232, 450), (232, 434), (232, 425), (233, 417), (237, 402), (240, 395), (242, 391), (248, 379), (252, 375), (256, 370), (262, 366), (274, 361), (280, 358), (289, 356), (308, 354), (318, 353), (329, 352), (351, 352), (362, 352), (374, 352), (398, 352), (409, 352), (421, 352), (441, 355), (449, 357), (457, 359), (463, 361), (475, 367), (479, 371), (483, 374), (488, 380), (490, 383), (491, 386), (493, 389), (496, 398), (497, 403), (498, 409), (499, 422), (501, 429), (502, 436), (503, 447), (504, 452), (505, 459), (505, 471), (504, 475), (502, 480), (500, 484), (495, 491), (492, 495), (488, 499), (481, 505), (478, 509), (475, 512), (469, 517), (466, 520), (459, 528), (454, 531), (451, 533), (447, 535), (439, 538), (435, 540), (430, 541), (419, 545), (414, 547), (409, 548), (400, 550), (397, 552), (392, 552), (384, 553), (380, 553), (375, 554), (373, 555), (372, 555), (372, 555)]
# 
# input_8 = [(280, 510), (278, 509), (277, 508), (277, 505), (275, 503), (272, 496), (271, 492), (268, 487), (265, 483), (261, 472), (259, 466), (255, 454), (253, 448), (251, 442), (250, 435), (248, 422), (247, 415), (247, 409), (249, 396), (250, 390), (252, 385), (256, 373), (258, 367), (264, 355), (266, 349), (269, 343), (276, 332), (280, 328), (283, 323), (292, 316), (296, 313), (300, 310), (305, 308), (313, 306), (319, 306), (323, 305), (335, 305), (341, 305), (348, 305), (355, 305), (367, 307), (373, 308), (378, 310), (389, 313), (394, 316), (401, 319), (415, 326), (422, 330), (429, 334), (442, 342), (447, 346), (452, 351), (461, 359), (466, 364), (470, 369), (478, 381), (481, 387), (484, 394), (486, 400), (488, 413), (489, 421), (490, 437), (490, 445), (490, 453), (490, 461), (488, 476), (487, 484), (484, 499), (481, 505), (479, 511), (474, 521), (472, 525), (469, 529), (463, 534), (460, 536), (456, 538), (448, 541), (444, 542), (439, 543), (430, 545), (425, 546), (419, 547), (406, 548), (400, 549), (393, 549), (379, 549), (373, 549), (366, 549), (353, 549), (348, 549), (343, 549), (339, 548), (335, 547), (328, 545), (324, 544), (321, 543), (316, 540), (313, 538), (311, 536), (307, 532), (304, 530), (301, 528), (297, 523), (295, 521), (292, 518), (286, 512), (283, 510), (282, 508), (279, 504), (278, 502), (277, 500), (276, 497), (275, 496), (274, 494), (274, 493), (273, 491), (273, 491)]
# input_9 = [(376, 263), (377, 263), (380, 263), (384, 263), (391, 263), (396, 263), (400, 263), (405, 263), (415, 265), (421, 267), (428, 268), (441, 273), (448, 276), (454, 279), (462, 283), (476, 291), (482, 296), (487, 301), (496, 313), (501, 319), (504, 327), (510, 341), (511, 349), (513, 357), (514, 375), (514, 383), (514, 392), (513, 401), (508, 420), (506, 429), (500, 448), (498, 457), (495, 466), (491, 475), (484, 491), (479, 498), (472, 509), (467, 514), (463, 519), (454, 526), (450, 528), (445, 529), (434, 532), (428, 533), (421, 533), (408, 534), (400, 534), (393, 535), (378, 535), (370, 535), (362, 535), (346, 532), (337, 530), (330, 529), (316, 525), (311, 522), (306, 520), (298, 514), (295, 510), (290, 506), (287, 502), (280, 491), (277, 486), (274, 481), (271, 475), (268, 463), (266, 457), (265, 452), (263, 440), (262, 433), (262, 427), (261, 413), (261, 406), (261, 400), (262, 386), (263, 379), (265, 370), (267, 362), (271, 347), (273, 340), (277, 327), (280, 321), (281, 315), (283, 310), (286, 302), (289, 298), (290, 296), (293, 294), (298, 291), (300, 289), (305, 287), (307, 287), (310, 286), (313, 285), (319, 283), (322, 282), (324, 281), (325, 280), (328, 280), (330, 279), (331, 279), (334, 277), (336, 277), (340, 276), (342, 275), (344, 274), (348, 274), (349, 274), (351, 274), (351, 273), (352, 273), (354, 273), (355, 273), (355, 273)]
# input_10 = [(540, 395), (540, 396), (540, 397), (540, 399), (541, 403), (541, 406), (541, 409), (541, 417), (541, 421), (541, 427), (541, 432), (541, 443), (541, 448), (541, 455), (541, 466), (539, 472), (537, 478), (531, 488), (528, 492), (523, 496), (515, 502), (510, 506), (500, 513), (494, 516), (488, 519), (476, 524), (469, 526), (461, 529), (445, 533), (436, 535), (417, 535), (407, 535), (398, 535), (381, 535), (373, 534), (367, 532), (352, 529), (344, 526), (337, 523), (325, 517), (320, 513), (316, 508), (312, 503), (305, 493), (302, 487), (299, 481), (295, 469), (293, 463), (292, 456), (289, 442), (289, 435), (289, 428), (289, 414), (289, 406), (289, 398), (293, 382), (296, 373), (299, 366), (305, 350), (308, 343), (312, 335), (319, 321), (322, 316), (325, 310), (333, 301), (336, 298), (340, 295), (343, 292), (349, 289), (352, 289), (355, 288), (364, 288), (369, 288), (375, 288), (390, 288), (398, 288), (408, 288), (426, 289), (434, 289), (442, 290), (457, 291), (463, 292), (469, 292), (479, 295), (483, 296), (487, 298), (495, 301), (499, 303), (501, 304), (506, 306), (508, 308), (510, 309), (514, 313), (514, 314), (516, 316), (517, 318), (519, 322), (520, 324), (522, 327), (525, 331), (527, 334), (528, 337), (529, 341), (530, 343), (531, 345), (532, 349), (532, 352), (532, 354), (533, 358), (534, 359), (534, 361), (534, 365), (534, 367), (534, 370), (534, 373), (535, 375), (535, 376), (535, 379), (535, 380), (535, 382), (535, 383), (535, 384), (535, 385), (535, 385)]
# 
# multiple_test = dict()
# multiple_test['clockSquare'] = [input_0, input_1, input_2, input_3]
# multiple_test['clockTriangle'] = [input_4, input_5, input_6, input_7]
# multiple_test['clockCircle'] = [input_8, input_9, input_10]
# 
# with open('test_multiple.pickle', 'wb') as handle:
#     pickle.dump(multiple_test, handle, protocol=pickle.HIGHEST_PROTOCOL)
# =============================================================================
